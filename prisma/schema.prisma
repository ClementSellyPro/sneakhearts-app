generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  accounts account[]
  sessions session[]
  favorites Favorite[] 
  cartItems CartItem[]

  @@map("users")
}

model account {
  id                String   @id
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime
  updatedAt         DateTime

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("accounts")
}

model session {
  id           String   @id
  token        String
  userId       String
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime
  updatedAt    DateTime

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model verification {
  id         String   @id
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime?

  @@map("verifications")
}

// models for the products
model Product {
  id        String   @id @default(cuid())
  productId String   @unique
  name      String
  brand     String
  basePrice Float
  category  String
  gender    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  variations ProductVariation[]
  favorites  Favorite[]
  
  @@map("products")
}

model ProductVariation {
  id           String   @id @default(cuid())
  colorway     String
  price        Float
  salePrice    Float?
  thumbnailUrl String
  largeUrl     String
  alt          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sizes ProductSize[]
  cartItems CartItem[]
  
  @@map("product_variations")
}

model ProductSize {
  id       String  @id @default(cuid())
  size     String
  inStock  Boolean
  quantity Int
  
  variationId String
  variation   ProductVariation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  
  @@unique([variationId, size])
  @@map("product_sizes")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model CartItem {
  id          String   @id @default(cuid())
  userId      String
  variationId String
  size        String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  variation ProductVariation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@unique([userId, variationId, size])
  @@map("cart_items")
}